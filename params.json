{"name":"Idicon","tagline":"Identicon lib + command line printing tool","body":"Identicons in Go\r\n================\r\n\r\n![GeorgeMac SVG](./images/georgemac.png \"GeorgeMac\") ![gobug.me SVG](./images/gobugme.png \"gobug.me\") ![incisive.ly SVG](./images/incisively.png)\r\n\r\nUse the following to get the libs:\r\n\r\n`go get github.com/GeorgeMac/idicon`\r\n\r\nUse the following to get the `idicon` command\r\n\r\n`go get github.com/GeorgeMac/idicon/cmd/idicon`\r\n\r\nSee: [idicon command](https://github.com/GeorgeMac/idicon/tree/master/cmd/idicon)\r\n\r\n### lib usage\r\n\r\nBasically this:\r\n```go\r\ngenerator, err := icon.NewGenerator(5, 5, icon.UseMd5, icon.SvgSize(10))\r\nif err != nil {\r\n    // handle error\r\n}\r\n\r\n// use the generator for a given string input\r\nicn := generator.Generate(`GeorgeMac`)\r\n\r\n// string representation\r\nfmt.Print(icn)\r\n\r\n// svg string representation\r\nfmt.Print(icn.Svg())\r\n```\r\n\r\n### Variadic NewGenerator Function\r\n\r\n`func NewGenerator(width, height int, opts ...option) *icon.Generator`\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}