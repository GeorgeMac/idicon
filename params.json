{"name":"Idicon","tagline":"Identicon lib + command line printing tool","body":"Identicons in Go\r\n================\r\n\r\n![georgemac](./images/georgemac.png \"georgemac\")\r\n![gobug.me](./images/gobugme.png \"gobug.me\")\r\n![incisive.ly](./images/incisively.png \"incisive.ly\")\r\n\r\nUse the following to get the libs:\r\n\r\n`go get github.com/GeorgeMac/idicon`\r\n\r\nUse the following to get the `idicon` command\r\n\r\n`go get github.com/GeorgeMac/idicon/cmd/idicon`\r\n\r\nSee: [idicon command](https://github.com/GeorgeMac/idicon/tree/master/cmd/idicon)\r\n\r\n### lib usage\r\n\r\nBasically this:\r\n```go\r\ngenerator, err := icon.NewGenerator(5, 5, icon.UseMd5, icon.SvgSize(10))\r\nif err != nil {\r\n    // handle error\r\n}\r\n\r\n// use the generator for a given string input\r\nicn := generator.Generate(`GeorgeMac`)\r\n\r\n// string representation\r\nfmt.Print(icn)\r\n\r\n// svg string representation\r\nfmt.Print(icn.Svg())\r\n```\r\n\r\n### NewGenerator with variadic options\r\n\r\n```go\r\ntype option func(g *Generator) error\r\n\r\nfunc NewGenerator(width, height int, ...option) *Generator { ... }\r\n```\r\n\r\nCurrent available options include:\r\n\r\n```go\r\nicon.UseSha1 // pointless because it does this by default but meh\r\nicon.UseMd5 // use md5 hash function for generating identicons\r\nicon.SvgSize(size int) // set the width/height of the outputted svg squares\r\n```\r\n\r\nFuture options, currently **NOT** available:\r\n```go\r\nicon.SetPalette(basePalette, complPalette)\r\nicon.Use* // any hash functions the community desire?\r\nicon.UseHash(func() hash.Hash) // user supplied hash generator function\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}